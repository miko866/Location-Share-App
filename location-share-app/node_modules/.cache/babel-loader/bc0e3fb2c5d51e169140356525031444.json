{"ast":null,"code":"var _jsxFileName = \"/Users/michalevo/Desktop/My_Code/Java/location-share-app/location-share-app/src/components/Dashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthenticationController from '../controllers/AuthenticationController';\nimport { connect } from 'react-redux';\nimport { getPosts, deletePost } from '../actions/projectActions';\nimport PropTypes from 'prop-types';\nimport jwtDecode from 'jwt-decode'; // Custom CSS\n\nimport '../assets/css/components/location-card.css';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedUserId: ''\n    }; // Register methods\n\n    this.showMap = this.showMap.bind(this);\n    this.editLocation = this.editLocation.bind(this);\n    this.onDeleteClick = this.onDeleteClick.bind(this);\n  }\n\n  onDeleteClick(id) {\n    this.props.deletePost(id);\n  }\n\n  showMap(street, streetNumber, zip, city) {\n    // Create address from data\n    let address = street + ' ' + streetNumber + ' ' + zip + ' ' + city;\n    sessionStorage.setItem('address', address);\n    this.props.history.push('/map');\n  }\n\n  componentDidMount() {\n    this.props.getPosts();\n    let user = sessionStorage.getItem('jwtToken'); // Check if user is logged\n\n    if (user !== '') {\n      // Check localStorage\n      if (window.localStorage) {\n        // Exist any item -> firstLoad -> created it\n        if (!localStorage.getItem('firstLoad')) {\n          localStorage['firstLoad'] = true;\n          window.location.reload();\n        } else localStorage.removeItem('firstLoad');\n      }\n    }\n  }\n\n  editLocation() {\n    this.props.history.push('/editPost/:id');\n  }\n\n  render() {\n    // Save data from Server\n    const posts = this.props.post.posts; // Create Token\n\n    const token = sessionStorage.getItem('jwtToken');\n    let tokenId = 0;\n\n    if (token !== null) {\n      const decoded = jwtDecode(token);\n      tokenId = parseInt(decoded.id, 10);\n      sessionStorage.setItem('userName', decoded.username);\n      sessionStorage.setItem('userId', decoded.id);\n    } // Variable with Auth method\n    // Check if user is logged in\n\n\n    const isUserLoggedIn = AuthenticationController.isUserLoggedIn();\n    const userId = sessionStorage.getItem('userId');\n    return React.createElement(\"section\", {\n      className: \"location-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, posts.map(item => React.createElement(\"div\", {\n      className: \"card\",\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, item.title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, item.street, \" \", item.streetNumber, \" \", item.zip, \" \", item.city), React.createElement(\"div\", {\n      className: \"location-card__author pb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: `/user/${userId}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, item.postAuthor)), React.createElement(\"p\", {\n      className: \"card-text pb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, item.text), React.createElement(\"div\", {\n      to: \"/map\",\n      className: \"btn btn-outline-danger text-danger mr-4\",\n      onClick: () => this.showMap(item.street, item.streetNumber, item.zip, item.city),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"View on Map\"), isUserLoggedIn && item.postAuthorId === tokenId && React.createElement(Link, {\n      to: `/editPost/${item.id}`,\n      className: \"btn btn-outline-primary text-primary mr-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Edit\"), isUserLoggedIn && item.postAuthorId === tokenId && React.createElement(\"div\", {\n      className: \"btn btn-link text-danger\",\n      onClick: () => this.onDeleteClick(item.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Delete\"))))));\n  }\n\n} // Redux\n\n\nDashboard.propsTypes = {\n  post: PropTypes.object.isRequired,\n  getPosts: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  getPosts,\n  deletePost\n})(Dashboard);","map":{"version":3,"sources":["/Users/michalevo/Desktop/My_Code/Java/location-share-app/location-share-app/src/components/Dashboard.jsx"],"names":["React","Component","Link","AuthenticationController","connect","getPosts","deletePost","PropTypes","jwtDecode","Dashboard","constructor","props","state","loggedUserId","showMap","bind","editLocation","onDeleteClick","id","street","streetNumber","zip","city","address","sessionStorage","setItem","history","push","componentDidMount","user","getItem","window","localStorage","location","reload","removeItem","render","posts","post","token","tokenId","decoded","parseInt","username","isUserLoggedIn","userId","map","item","title","postAuthor","text","postAuthorId","propsTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthenticationController from '../controllers/AuthenticationController';\nimport { connect } from 'react-redux';\nimport { getPosts, deletePost } from '../actions/projectActions';\nimport PropTypes from 'prop-types';\nimport jwtDecode from 'jwt-decode';\n\n// Custom CSS\nimport '../assets/css/components/location-card.css';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedUserId: '',\n    };\n\n    // Register methods\n    this.showMap = this.showMap.bind(this);\n    this.editLocation = this.editLocation.bind(this);\n    this.onDeleteClick = this.onDeleteClick.bind(this);\n  }\n\n  onDeleteClick(id) {\n    this.props.deletePost(id);\n  }\n\n  showMap(street, streetNumber, zip, city) {\n    // Create address from data\n    let address = street + ' ' + streetNumber + ' ' + zip + ' ' + city;\n    sessionStorage.setItem('address', address);\n    this.props.history.push('/map');\n  }\n\n  componentDidMount() {\n    this.props.getPosts();\n\n    let user = sessionStorage.getItem('jwtToken');\n    // Check if user is logged\n    if (user !== '') {\n      // Check localStorage\n      if (window.localStorage) {\n        // Exist any item -> firstLoad -> created it\n        if (!localStorage.getItem('firstLoad')) {\n          localStorage['firstLoad'] = true;\n          window.location.reload();\n        } else localStorage.removeItem('firstLoad');\n      }\n    }\n  }\n\n  editLocation() {\n    this.props.history.push('/editPost/:id');\n  }\n\n  render() {\n    // Save data from Server\n    const { posts } = this.props.post;\n\n    // Create Token\n    const token = sessionStorage.getItem('jwtToken');\n    let tokenId = 0;\n\n    if (token !== null) {\n      const decoded = jwtDecode(token);\n      tokenId = parseInt(decoded.id, 10);\n      sessionStorage.setItem('userName', decoded.username);\n      sessionStorage.setItem('userId', decoded.id);\n    }\n\n    // Variable with Auth method\n    // Check if user is logged in\n    const isUserLoggedIn = AuthenticationController.isUserLoggedIn();\n\n    const userId = sessionStorage.getItem('userId');\n\n    return (\n      <section className=\"location-card\">\n        <div className=\"container\">\n          {/* Render Cards from bully data */}\n          {posts.map((item) => (\n            <div className=\"card\" key={item.id}>\n              {/* <img\n                src={require(`../assets/img/${item.image}`)}\n                className=\"card-img-top\"\n                alt={item.title}\n              /> */}\n              <div className=\"card-body\">\n                <h2 className=\"card-title\">{item.title}</h2>\n                <h5>\n                  {item.street} {item.streetNumber} {item.zip} {item.city}\n                </h5>\n                <div className=\"location-card__author pb-3\">\n                  <Link to={`/user/${userId}`}>{item.postAuthor}</Link>\n                </div>\n                <p className=\"card-text pb-3\">{item.text}</p>\n                <div\n                  to=\"/map\"\n                  className=\"btn btn-outline-danger text-danger mr-4\"\n                  onClick={() => this.showMap(item.street, item.streetNumber, item.zip, item.city)}>\n                  View on Map\n                </div>\n\n                {/* Only Logged user can see that */}\n                {isUserLoggedIn && item.postAuthorId === tokenId && (\n                  <Link\n                    to={`/editPost/${item.id}`}\n                    className=\"btn btn-outline-primary text-primary mr-5\">\n                    Edit\n                  </Link>\n                )}\n                {isUserLoggedIn && item.postAuthorId === tokenId && (\n                  <div\n                    className=\"btn btn-link text-danger\"\n                    onClick={() => this.onDeleteClick(item.id)}>\n                    Delete\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n    );\n  }\n}\n\n// Redux\nDashboard.propsTypes = {\n  post: PropTypes.object.isRequired,\n  getPosts: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, { getPosts, deletePost })(Dashboard);\n"]},"metadata":{},"sourceType":"module"}