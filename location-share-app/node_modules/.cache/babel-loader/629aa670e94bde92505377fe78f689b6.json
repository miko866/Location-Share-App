{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport setJWTToken from '../securityUtils/setJWTToken';\nimport jwtDecode from 'jwt-decode'; //* Create new user in SinginComponent\n\nexport const createNewUser = (newUser, history) => async dispatch => {\n  try {\n    // Connect to Server\n    await axios.post('/api/users/register', newUser); // Without errors redirect\n\n    history.push('/login'); // Save errors\n\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const login = LoginRequest => async dispatch => {\n  try {\n    // post - Login Request\n    const res = await axios.post('/api/users/login', LoginRequest); // extract token from res.data\n\n    const token = res.data.token; // store the token in the localStorage\n\n    sessionStorage.setItem('jwtToken', token); // set our token in header ***\n\n    setJWTToken(token); // decode token on React\n\n    const decoded = jwtDecode(token); // dispatch to securityReducer\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  sessionStorage.removeItem('jwtToken');\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["/Users/michalevo/Desktop/My_Code/React/location-share-app-client/location-share-app/src/actions/securityActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","setJWTToken","jwtDecode","createNewUser","newUser","history","dispatch","post","push","type","payload","error","response","data","login","LoginRequest","res","token","sessionStorage","setItem","decoded","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,MAAOC,QAAP,IAAoB;AACrE,MAAI;AACF;AACA,UAAMR,KAAK,CAACS,IAAN,CAAW,qBAAX,EAAkCH,OAAlC,CAAN,CAFE,CAGF;;AACAC,IAAAA,OAAO,CAACG,IAAR,CAAa,QAAb,EAJE,CAKF;;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOC,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeC;AAFjB,KAAD,CAAR;AAID;AACF,CAjBM;AAmBP,OAAO,MAAMC,KAAK,GAAIC,YAAD,IAAkB,MAAOT,QAAP,IAAoB;AACzD,MAAI;AACF;AACA,UAAMU,GAAG,GAAG,MAAMlB,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+BQ,YAA/B,CAAlB,CAFE,CAGF;;AAHE,UAIME,KAJN,GAIgBD,GAAG,CAACH,IAJpB,CAIMI,KAJN,EAKF;;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCF,KAAnC,EANE,CAQF;;AACAhB,IAAAA,WAAW,CAACgB,KAAD,CAAX,CATE,CAWF;;AACA,UAAMG,OAAO,GAAGlB,SAAS,CAACe,KAAD,CAAzB,CAZE,CAcF;;AACAX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,gBADC;AAEPU,MAAAA,OAAO,EAAEU;AAFF,KAAD,CAAR;AAID,GAnBD,CAmBE,OAAOT,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPW,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeC;AAFjB,KAAD,CAAR;AAID;AACF,CA1BM;AA4BP,OAAO,MAAMQ,MAAM,GAAG,MAAOf,QAAD,IAAc;AACxCY,EAAAA,cAAc,CAACI,UAAf,CAA0B,UAA1B;AACArB,EAAAA,WAAW,CAAC,KAAD,CAAX;AACAK,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAET,gBADC;AAEPU,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR;AAID,CAPM","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport setJWTToken from '../securityUtils/setJWTToken';\nimport jwtDecode from 'jwt-decode';\n\n//* Create new user in SinginComponent\nexport const createNewUser = (newUser, history) => async (dispatch) => {\n  try {\n    // Connect to Server\n    await axios.post('/api/users/register', newUser);\n    // Without errors redirect\n    history.push('/login');\n    // Save errors\n    dispatch({\n      type: GET_ERRORS,\n      payload: {},\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data,\n    });\n  }\n};\n\nexport const login = (LoginRequest) => async (dispatch) => {\n  try {\n    // post - Login Request\n    const res = await axios.post('/api/users/login', LoginRequest);\n    // extract token from res.data\n    const { token } = res.data;\n    // store the token in the localStorage\n    sessionStorage.setItem('jwtToken', token);\n\n    // set our token in header ***\n    setJWTToken(token);\n\n    // decode token on React\n    const decoded = jwtDecode(token);\n\n    // dispatch to securityReducer\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded,\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data,\n    });\n  }\n};\n\nexport const logout = () => (dispatch) => {\n  sessionStorage.removeItem('jwtToken');\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {},\n  });\n};\n"]},"metadata":{},"sourceType":"module"}