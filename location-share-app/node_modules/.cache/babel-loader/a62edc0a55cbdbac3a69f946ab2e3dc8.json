{"ast":null,"code":"import _objectSpread from \"/Users/michalevo/Desktop/My_Code/React/location-share-app-client/location-share-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_POSTS, GET_POST, DELETE_POST, GET_POST_BY_AUTHOR, GET_USERS, GET_USER } from '../actions/types'; //* Create global state\n\nconst initialState = {\n  posts: [],\n  post: {},\n  users: [],\n  user: {}\n}; //* Save all posts from Server\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: action.payload\n      });\n\n    case GET_USERS:\n      return _objectSpread({}, state, {\n        users: action.payload\n      });\n\n    case GET_USER:\n      return _objectSpread({}, state, {\n        user: action.payload\n      });\n\n    case GET_POST_BY_AUTHOR:\n      return _objectSpread({}, state, {\n        posts: action.payload\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: action.payload\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post.id !== action.payload)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/michalevo/Desktop/My_Code/React/location-share-app-client/location-share-app/src/reducers/postReducer.js"],"names":["GET_POSTS","GET_POST","DELETE_POST","GET_POST_BY_AUTHOR","GET_USERS","GET_USER","initialState","posts","post","users","user","state","action","type","payload","filter","id"],"mappings":";AAAA,SACEA,SADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,kBAJF,EAKEC,SALF,EAMEC,QANF,QAOO,kBAPP,C,CASA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,IAAI,EAAE;AAJa,CAArB,C,CAOA;;AACA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,SAAL;AACE,+BACKW,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAFhB;;AAIF,SAAKV,SAAL;AACE,+BACKO,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFhB;;AAIF,SAAKT,QAAL;AACE,+BACKM,KADL;AAEED,QAAAA,IAAI,EAAEE,MAAM,CAACE;AAFf;;AAIF,SAAKX,kBAAL;AACE,+BACKQ,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAFhB;;AAIF,SAAKb,QAAL;AACE,+BACKU,KADL;AAEEH,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAFf;;AAIF,SAAKZ,WAAL;AACE,+BACKS,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAoBP,IAAD,IAAUA,IAAI,CAACQ,EAAL,KAAYJ,MAAM,CAACE,OAAhD;AAFT;;AAIF;AACE,aAAOH,KAAP;AAhCJ;AAkCD","sourcesContent":["import {\n  GET_POSTS,\n  GET_POST,\n  DELETE_POST,\n  GET_POST_BY_AUTHOR,\n  GET_USERS,\n  GET_USER,\n} from '../actions/types';\n\n//* Create global state\nconst initialState = {\n  posts: [],\n  post: {},\n  users: [],\n  user: {},\n};\n\n//* Save all posts from Server\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case GET_USERS:\n      return {\n        ...state,\n        users: action.payload,\n      };\n    case GET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case GET_POST_BY_AUTHOR:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: action.payload,\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}